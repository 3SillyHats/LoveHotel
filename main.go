package main

import (
	"io/ioutil"
	"log"

	"github.com/go-gl/gl"
	"github.com/go-gl/glfw"
)

func main() {
	log.SetFlags(log.Ltime | log.Llongfile)
	
	if err := glfw.Init(); err != nil {
		log.Fatal(err)
	}
	defer glfw.Terminate()
	
	glfw.OpenWindowHint(glfw.OpenGLVersionMajor, 3)
	glfw.OpenWindowHint(glfw.OpenGLVersionMinor, 2)
	glfw.OpenWindowHint(glfw.OpenGLProfile, glfw.OpenGLCoreProfile)
	if err := glfw.OpenWindow(800, 600, 0, 0, 0, 0, 16, 0, glfw.Windowed); err != nil {
		log.Fatal(err)
	}
	defer glfw.CloseWindow()
	glfw.SetWindowTitle("Dark Logic")

	if err := gl.Init(); err != gl.NO_ERROR {
		log.Fatal("gl.Init() failed")
	}
	
	// Clear errors generated by gl.Init()
	for err := ToError(gl.GetError()); err != nil; err = ToError(gl.GetError()) {
		log.Print(err)
	}
	
	gl.ClearColor(0.2, 0.2, 0.2, 1.0)
	
	// Create shaders
	vs := gl.CreateShader(gl.VERTEX_SHADER)
	vs_source, _ := ioutil.ReadFile("basic.vs")
	vs.Source(string(vs_source))
	vs.Compile()
	if err := vs.GetInfoLog(); err != "" {
		log.Fatal(err)
	}
	
	fs := gl.CreateShader(gl.FRAGMENT_SHADER)
	fs_source, _ := ioutil.ReadFile("basic.fs")
	fs.Source(string(fs_source))
	fs.Compile()
	if err := fs.GetInfoLog(); err != "" {
		log.Print(err)
	}
	
	// Create shader program
	program := gl.CreateProgram()
	program.AttachShader(vs)
	program.AttachShader(fs)
	program.Validate()
	program.Link()
	program.Use()
	if err := program.GetInfoLog(); err != "" {
		log.Print(err)
	}
	
	if err := ToError(gl.GetError()); err != nil {
		log.Fatal(err)
	}
	
	// Setup uniforms
	
	var projMat Matrix4
	projMat.LoadOrthographic(-2, 2, -2, 2, -5, 5)
	a := projMat.Array()
	projLoc := program.GetUniformLocation("projection_matrix")
	projLoc.UniformMatrix4f(false, &a)
	sqt := NewSQT()
	mvLoc := program.GetUniformLocation("modelview_matrix")
	mat := sqt.Matrix()
	mvLoc.UniformMatrix4f(false, &mat)
	
	if err := ToError(gl.GetError()); err != nil {
		log.Fatal(err)
	}
	
	// Load model
	model := NewModel(program)

	gl.Viewport(0, 0, 800, 600);

	for glfw.WindowParam(glfw.Opened) > 0 {
		// Input
		if glfw.Key(glfw.KeyEsc) == glfw.KeyPress {
			glfw.CloseWindow()
		}
		
		sqt.Rotate(0.01, 1, 0, 0)
		sqt.Rotate(0.003, 0, 1, 0)
		sqt.Rotate(0.007, 0, 0, 1)
		mat = sqt.Matrix()
		mvLoc.UniformMatrix4f(false, &mat)

		// Rendering
		gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
		model.Render()
		glfw.SwapBuffers()
	}
}
